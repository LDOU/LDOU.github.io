<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>summary-method和v-on:input</title>
      <link href="/2020/08/26/summary-method%E5%92%8Cv-on-input/"/>
      <url>/2020/08/26/summary-method%E5%92%8Cv-on-input/</url>
      
        <content type="html"><![CDATA[<p> <img src="/img/blmm1.jpg"><br> 芭乐OS：烦~</p><a id="more"></a><p>show-summary为true时，会在表格尾部展示合计行，只要是数值的就会自动进行合计操作(！！表格项中必须带prop！)<br>summaryy-method用来自定义合计逻辑，返回值是一个数组，这个数组显示在合计行各列中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">getSummaries (param) &#123;</span><br><span class="line">    const &#123; columns, data &#125; &#x3D; param</span><br><span class="line">    const sums &#x3D; []</span><br><span class="line">    columns.forEach((column, index) &#x3D;&gt; &#123;</span><br><span class="line">    if (index &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">        sums[index] &#x3D; &#39;总计&#39;</span><br><span class="line">    &#125; else if (index &#x3D;&#x3D;&#x3D; 10 || index &#x3D;&#x3D;&#x3D; 11 || index &#x3D;&#x3D;&#x3D; 12 || index &#x3D;&#x3D;&#x3D; 13) &#123;</span><br><span class="line">        const values &#x3D; data.map(item &#x3D;&gt; Number(item[column.property]))</span><br><span class="line">        if (!values.every(value &#x3D;&gt; isNaN(value))) &#123;</span><br><span class="line">            sums[index] &#x3D; values.reduce((prev, curr) &#x3D;&gt; &#123;</span><br><span class="line">                const value &#x3D; Number(curr)</span><br><span class="line">                if (!isNaN(value)) &#123;</span><br><span class="line">                    return prev + curr</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return prev</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 0)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            sums[index] &#x3D; &#39; &#39;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    return sums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v-on:input是在结合上面的合计中  当input里输入值的时候就计算合计值<br>！！注意传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column label&#x3D;&quot;退款数量&quot; prop&#x3D;&quot;refundnum&quot;&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">        &lt;el-input v-model&#x3D;&quot;row.refundnum&quot; v-on:input &#x3D; &quot;getPrice(row)&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;el-table-column&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> element </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数据类型</title>
      <link href="/2020/08/20/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/08/20/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/blmm2.jpg"></p><a id="more"></a><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型:"></a>原始类型:</h3><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>BigInt</li><li>String</li><li>Symbol<br>引用类型：</li><li>Object</li></ul><p>注意：</p><ul><li>js只有一种数字类型，不管是符号值还是NaN都是Number类型</li><li>对象、数组、Data、正则都是Object<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typeof &#123;a: 1&#125; &#x3D;&#x3D;&#x3D; &#39;object&#39;</span><br><span class="line">typeof [1, 2, 3] &#x3D;&#x3D;&#x3D; &#39;object&#39;</span><br><span class="line">typeof new Date() &#x3D;&#x3D;&#x3D; &#39;object&#39;</span><br><span class="line">typeof &#x2F;regex&#x2F; &#x3D;&#x3D;&#x3D; &#39;object&#39;</span><br><span class="line">typeof null &#x3D;&#x3D;&#x3D; &#39;object&#39;</span><br><span class="line"></span><br><span class="line">数据类型的判断</span><br><span class="line"></span><br><span class="line">+ typeof</span><br><span class="line">不能判断null、array</span><br><span class="line"></span><br><span class="line">+ instanceof</span><br><span class="line">用来判断A是否是B的实例 A instanceof B,返回布尔值</span><br><span class="line">判断一个对象在其原型链中是否存在一个构造函数的prototype属性，不能检测 null 和undefined</span><br></pre></td></tr></table></figure>[] instanceof Array     //true<br>new Date() instanceof Date     //true<br>null instanceof null      //报错<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+Object.prototype.toString.call()</span><br></pre></td></tr></table></figure>Object.prototype.toString.call(‘’)    //[object String]<br>Object.prototype.toString.call(1)    //[object Number]<br>Object.prototype.toString.call(undefined)    //[object undefined]<br>Object.prototype.toString.call(new Function())    //[object Function]<br>Object.prototype.toString.call([])    //[object Array]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">显示类型转换:</span><br><span class="line">转为Number： Number() | parseFloat() | parseInt()</span><br><span class="line">转为String： String() | toString()</span><br><span class="line">转为Boolean： Boolean()   转之后false的有：undefined null false +0 -0 NaN &quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">隐式转换:   +  &#x3D;&#x3D;</span><br><span class="line">加法运算：一方是字符串类型，另一方就会被转成字符串</span><br><span class="line">其他运算：一方是数字，另一方就会被转成数字</span><br></pre></td></tr></table></figure>1 + ‘1’    //‘11’<br>2 * ‘2’    // 4<br>[1, 2] + [2, 1]    //‘1,22,1’<br>// [1, 2].toString() -&gt; ‘1,2’<br>// [2, 1].toString() -&gt; ‘2,1’<br>// ‘1,2’ + ‘2,1’ = ‘1,22,1’</li></ul><p>‘a’ + + ‘b’    //‘aNaN’<br>// + ‘b’ -&gt; NaN</p><pre><code>x == y   返回  true  或者  false+ x、y类型相同  x为undefined  =&gt; true  x为null  =&gt; true  x为number         x为NaN   =&gt; true       x、y值相等   =&gt; true       x为 +0 y为 -0   =&gt; true  x为String，y跟他完全相同字符序列   =&gt; true  x为Boolean，同时为true或者false   =&gt; true  x、y引用同一对象   =&gt; true+ x为null，y为undefined   =&gt; true+ x为Number，y为String 返回比较x == toNumber(y)的结果+ x为Boolean，返回比较toNumber(x) == y的结果+ x为String或Number，且y为Object，返回比较 x == y的结果</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js字符串操作</title>
      <link href="/2020/08/20/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/08/20/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/bale2.jpg"><br>芭乐在线耍赖</p><a id="more"></a><p>charAt()<br>返回参数位置的字符,没有返回空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str &#x3D; &quot;ba le mai mai&quot;</span><br><span class="line">console.log(str.charAt(6))    &#x2F;&#x2F;  m</span><br><span class="line">console.log(str.charAt(26))   &#x2F;&#x2F;  &#39;&#39;</span><br></pre></td></tr></table></figure><p>charCodeAt()<br>返回参数位置的字符编码，没有则返回NaN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str &#x3D; &quot;ba le mai mai&quot;</span><br><span class="line">console.log(str.charCodeAt(6))    &#x2F;&#x2F;  109</span><br><span class="line">console.log(str.charCodeAt(26))   &#x2F;&#x2F;  NaN</span><br></pre></td></tr></table></figure><p>concat()<br>返回拼接字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str &#x3D; &quot;ba le mai mai&quot;</span><br><span class="line">console.log(str.concat(&#39; hao&#39;, &#39;ke&#39;, &#39;ai&#39;))    &#x2F;&#x2F;  ba le mai mai haokeai</span><br></pre></td></tr></table></figure><p>indexOf() &amp; lastIndexOf()<br>indexof(查找值，开始位置)，从头开始查找，返回位置，不存在返回-1<br>lastIndexOf(查找值，开始位置)，从尾巴开始查找，不存在返回-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str &#x3D; &quot;ba le mai mai&quot;</span><br><span class="line">console.log(str.indexOf(&#39;a&#39;, 5))    &#x2F;&#x2F;  7</span><br><span class="line">console.log(str.lastIndexOf(&#39;a&#39;))   &#x2F;&#x2F;  11</span><br></pre></td></tr></table></figure><p>substring() &amp; substr() &amp; slice()<br>subsring(开始位置，结束位置)<br>substr(开始位置，数量)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let str &#x3D; &quot;balemaimai&quot;</span><br><span class="line">console.log(str.substring(1, 5))    &#x2F;&#x2F;  alem</span><br><span class="line">console.log(str.substr(1, 5))   &#x2F;&#x2F;  alema</span><br><span class="line">console.log(str.slice(1, 5))  &#x2F;&#x2F;  alem</span><br></pre></td></tr></table></figure><p>split()<br>可以用来根据符号来分割字符串，或者换符号<br>可以把字符串根据条件转成数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let str &#x3D; &quot;ba le mai mai&quot;</span><br><span class="line">console.log(str.split(&quot; &quot;) + &quot;,&quot;)    &#x2F;&#x2F;  ba,le,mai,mai,</span><br><span class="line">console.log(str.split(&quot;&quot;) + &quot;,&quot;)   &#x2F;&#x2F;  b,a, ,l,e, ,m,a,i, ,m,a,i,</span><br><span class="line">console.log(str.split(&quot; &quot;, 3))      &#x2F;&#x2F;  [ &#39;ba&#39;, &#39;le&#39;, &#39;mai&#39; ]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js Array</title>
      <link href="/2020/08/18/js-Array/"/>
      <url>/2020/08/18/js-Array/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/bale1.jpg"><br>芭乐宝宝小时候~</p><a id="more"></a><p>shift() &amp; unshift()<br>shift()从头部取出值，返回第一项<br>unshift()从头部插入值，返回值是length</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const arr &#x3D; [&#39;1&#39;,&#39;a&#39;,&#39;2&#39;];    &#x2F;&#x2F;  [ &#39;77&#39;, &#39;a&#39;, &#39;2&#39; ]</span><br><span class="line">const b &#x3D; arr.shift()         &#x2F;&#x2F;  1</span><br><span class="line">const c &#x3D; arr.unshift(&#39;77&#39;)   &#x2F;&#x2F;  3</span><br></pre></td></tr></table></figure><p>forEach()<br>给数组每一项运行给定函数，没有返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const arr &#x3D; [&#39;1&#39;,&#39;5&#39;,&#39;2&#39;];</span><br><span class="line">arr.forEach((item, index, array) &#x3D;&gt; &#123;</span><br><span class="line">  array[index] &#x3D; item * 2</span><br><span class="line">&#125;);                                     &#x2F;&#x2F;  [ 2, 10, 4 ]</span><br></pre></td></tr></table></figure><p>includes()<br>includes(查找的值，查找起始位置)，如果第二个参数为负数说明从后开始查找，返回值是布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const arr &#x3D; [&#39;1&#39;,&#39;5&#39;,&#39;2&#39;];</span><br><span class="line">console.log(arr.includes(3));        &#x2F;&#x2F;  false</span><br><span class="line">console.log(arr.includes(5, 2));     &#x2F;&#x2F;  false</span><br><span class="line">console.log(arr.includes(&#39;2&#39;, 1));   &#x2F;&#x2F;  true</span><br></pre></td></tr></table></figure><p>indexOf() &amp; lastIndexOf<br>indexOf(查找的值，查找起始位置)，返回位置，如果查找不到返回-1<br>lastIndexOf从后往前找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const values&#x3D; [1, 3, 4, 6];</span><br><span class="line">console.log(values.indexOf(4));      &#x2F;&#x2F; 2</span><br><span class="line">console.log(values.indexOf(4, 2));   &#x2F;&#x2F; 2</span><br><span class="line">console.log(values.indexOf(4, 3));   &#x2F;&#x2F; -1</span><br><span class="line">console.log(values.lastIndexOf(6));      &#x2F;&#x2F; 3</span><br><span class="line">console.log(values.lastIndexOf(6, 2));   &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure><p>join()<br>改变间隔符，返回string</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const values&#x3D; [1, 3, 4, 6];</span><br><span class="line">console.log(values.join(&#39;$&#39;));     &#x2F;&#x2F;  1$3$4$6</span><br></pre></td></tr></table></figure><p>keys() &amp; values() &amp; entries()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const arr&#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];       </span><br><span class="line">for (let index of arr.keys()) &#123;              &#x2F;&#x2F;  0</span><br><span class="line">  console.log(index);                        &#x2F;&#x2F;  1</span><br><span class="line">&#125;                                            &#x2F;&#x2F;  2</span><br><span class="line">for (let elem of arr.values()) &#123;             &#x2F;&#x2F; &#39;a&#39;</span><br><span class="line">  console.log(elem);                         &#x2F;&#x2F; &#39;b&#39;</span><br><span class="line">&#125;                                            &#x2F;&#x2F; &#39;c&#39;</span><br><span class="line">for (let [index,elem] of arr.entries()) &#123;    &#x2F;&#x2F;  0 &#39;a&#39;</span><br><span class="line">  console.log(index, elem);                  &#x2F;&#x2F;  1 &#39;b&#39;</span><br><span class="line">&#125;                                            &#x2F;&#x2F;  2 &#39;c&#39;</span><br></pre></td></tr></table></figure><p>map()<br>给数组每一项运行给定函数，返回操作后的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const arr &#x3D; [&#39;1&#39;,&#39;5&#39;,&#39;2&#39;];</span><br><span class="line">arr.forEach((item, index, array) &#x3D;&gt; &#123;</span><br><span class="line">  array[index] &#x3D; item * 2</span><br><span class="line">&#125;);                                     &#x2F;&#x2F;  [ 2, 10, 4 ]</span><br></pre></td></tr></table></figure><p>push() &amp; pop()<br>push()从末尾添加数组项，返回length<br>pop()从末尾跳出，返回跳出项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const values&#x3D; [1, 3, 4, 6];</span><br><span class="line">console.log(values.pop(4));    &#x2F;&#x2F; 6</span><br><span class="line">console.log(values.push(4));   &#x2F;&#x2F; 5</span><br></pre></td></tr></table></figure><p>reverse() &amp; sort()<br>reverse()反转数组，修改原数组<br>sort()按第一个字符排列，所以排列a - b,倒序b - a，修改原数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const values&#x3D; [1, 3, 4, 6];</span><br><span class="line">console.log(values.reverse());    &#x2F;&#x2F; [ 6, 4, 3, 1 ]</span><br><span class="line">const values&#x3D; [1, 3, 14, 6, 2];</span><br><span class="line">console.log(values.sort());    &#x2F;&#x2F; [ 1, 14, 2, 3, 6 ]</span><br><span class="line">values.sort((a, b) &#x3D;&gt; &#123;</span><br><span class="line">    return a - b</span><br><span class="line">&#125;)</span><br><span class="line">console.log(values)         &#x2F;&#x2F;[ 1, 2, 3, 6, 14 ]</span><br></pre></td></tr></table></figure><p>slice() &amp; splice() &amp; concat()<br>slice(起始位置，结束位置)，截取数组返回新数组<br>concat()尾部增加数组项<br>concat(起始位置，删除数量，增加数量)，对原数组进行操作，返回删除项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const values&#x3D; [1, 3, 4, 6, 2];</span><br><span class="line">console.log(values.slice(1, 2));    &#x2F;&#x2F; [ 3 ]</span><br><span class="line">console.log(values.concat(1, 4));    &#x2F;&#x2F; [ 1, 3, 4, 6, 2, 1, 4 ]</span><br><span class="line">const a &#x3D; values.splice(1, 2)</span><br><span class="line">console.log(a);         &#x2F;&#x2F; [ 3, 4 ]</span><br><span class="line">console.log(values);    &#x2F;&#x2F; [ 1, 6, 2 ]</span><br><span class="line">const b &#x3D; values.splice(1, 0, &#39;2&#39;, &#39;2&#39;)</span><br><span class="line">console.log(b);          &#x2F;&#x2F; []</span><br><span class="line">console.log(values);    &#x2F;&#x2F; [ 1, &#39;2&#39;, &#39;2&#39;, 6, 2 ]</span><br><span class="line">const c &#x3D; values.splice(1, 1, &#39;2&#39;)</span><br><span class="line">console.log(c);     &#x2F;&#x2F; [ &#39;2&#39; ]</span><br><span class="line">console.log(values);    &#x2F;&#x2F; [ 1, &#39;2&#39;, &#39;2&#39;, 6, 2 ]</span><br></pre></td></tr></table></figure><p>some() &amp; every()<br>返回布尔值ß</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const values&#x3D; [1, 3, 4, 6, 2];</span><br><span class="line">var f &#x3D; values.some((item) &#x3D;&gt; &#123;</span><br><span class="line">    return item &gt; 2</span><br><span class="line">&#125;)</span><br><span class="line">var f2 &#x3D; values.every((item) &#x3D;&gt; &#123;</span><br><span class="line">    return item &gt; 2</span><br><span class="line">&#125;)</span><br><span class="line">console.log(f)    &#x2F;&#x2F; true</span><br><span class="line">console.log(f2)    &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><p>filter()<br>对每一项进行给定函数操作，返回结果数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const values&#x3D; [1, 3, 14, 6, 2];</span><br><span class="line">const a &#x3D; values.filter((item) &#x3D;&gt; &#123;</span><br><span class="line">    return item &gt; 2</span><br><span class="line">&#125;)</span><br><span class="line">console.log(a)         &#x2F;&#x2F;[ 14, 3, 6 ]</span><br></pre></td></tr></table></figure><p>find() &amp; findIndex()<br>find()返回第一个符合条件的值，没有的话返回undefined<br>findIndex()返回第一个符合条件的位置，没有的话返回-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const values&#x3D; [1, 3, 14, 6, 2];</span><br><span class="line">const a &#x3D; values.find((item) &#x3D;&gt; &#123;</span><br><span class="line">    return item &gt; 2</span><br><span class="line">&#125;)</span><br><span class="line">console.log(a)         &#x2F;&#x2F;  14</span><br><span class="line">const b &#x3D; values.findIndex((item) &#x3D;&gt; &#123;</span><br><span class="line">    return item &gt; 2</span><br><span class="line">&#125;)</span><br><span class="line">console.log(b)         &#x2F;&#x2F;  1</span><br></pre></td></tr></table></figure><p>Array.from()<br>可以对类似数组的对象（只要有length属性）进行转化为数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array.from(&#39;hello&#39;); &#x2F;&#x2F; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span><br><span class="line">let strSet &#x3D; new Set([&#39;a&#39;, &#39;b&#39;]);</span><br><span class="line">Array.from(strSet); &#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;]</span><br></pre></td></tr></table></figure><p>Array.isArray()<br>判断是否是一个Array</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array.isArray([1, 2, 3]);     &#x2F;&#x2F; true</span><br><span class="line">Array.isArray(&#123;foo: 123&#125;);    &#x2F;&#x2F; false</span><br><span class="line">Array.isArray(&quot;foobar&quot;);      &#x2F;&#x2F; false</span><br><span class="line">Array.isArray(undefined);     &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>$nextTick()</title>
      <link href="/2020/08/17/nextTick/"/>
      <url>/2020/08/17/nextTick/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/maimai5.jpg"><br>麦麦喜欢的睡觉姿势</p><a id="more"></a><p>vue在更新DOM时是异步执行的，为了在数据变化之后等待vue完成更新DOM，可以在数据变化之后立即使用Vue.nextTick(callback).这样回调函数将在DOM更新完成后被调用。</p><p>在creadted()钩子函数里进行的DOM操作一定要在Vue.nextTick()的回调函数中。<br>因为执行的时候DOM还没有渲染。</p><p>在mounted()钩子函数中，因为所有的DOM已经渲染完成，所有进行任何DOM操作都是可以的。</p><p>在数据改变DOM结构的时候，这个操作都应该放在Vue.nextTick()回调中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>slot</title>
      <link href="/2020/08/13/%E6%8F%92%E6%A7%BDslot/"/>
      <url>/2020/08/13/%E6%8F%92%E6%A7%BDslot/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/maimai4.jpg"><br>麦麦：芭乐姐姐的窝？？   哦不不不，是我的！！</p><a id="more"></a><p>子组件某一部分，父组件对其有不同的数据呈现方式，这个时候可以用到插槽。<br>或者说在子组件某个地方留一个空，父组件可以在这里呈现。<br>使用slot-scope获取当前行的信息（scope.$index 索引，scope.row 当前行）</p><p>匿名插槽(名为default的插槽)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;slot&gt;aaa&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>当父组件没有给内容的时候，会渲染默认内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;插入内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>父组件的内容都在父组件域编译；子组件内容都在子组件域编译；</p><p>具名插槽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;slot name&#x3D;&quot;header&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">        &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">        &lt;slot name&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>向具名插槽提供内容的时候，使用v-slot指令，并以参数的形式提供名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;base&gt;</span><br><span class="line">    &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;p&gt;header内容&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;p&gt;默认插槽&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;p&gt;footer内容&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;base&gt;</span><br></pre></td></tr></table></figure><p>注意：<br>1、任何没有被包裹在带有 v-slot 的 template 中的内容都会被视为默认插槽的内容。<br>1、v-slot只能添加在 template 上</p><p>渲染结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;p&gt;header内容&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">        &lt;p&gt;默认插槽&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">        &lt;p&gt;footer内容&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>作用域插槽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;item in List&quot;&gt;</span><br><span class="line">                &lt;slot v-bind:itemValue &#x3D; &quot;item&quot;&gt;</span><br><span class="line">                &lt;&#x2F;slot&gt;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            List:[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>通过v-bind向父组件传递内容，暴露出接口itemValue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;base&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;slotProps&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;base&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table动态添加tag</title>
      <link href="/2020/08/13/element-table%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0tag/"/>
      <url>/2020/08/13/element-table%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0tag/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/maimai3.jpg"><br>麦麦：歪歪歪？？</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column </span><br><span class="line">    label&#x3D;&quot;状态&quot;</span><br><span class="line">    prop&#x3D;&quot;status&quot;</span><br><span class="line">    :filters&#x3D;&quot;[&#123; text: &#39;待处理&#39;, value: &#39;待处理&#39; &#125;]&quot;</span><br><span class="line">    :filter-method&#x3D;&quot;filterTag&quot;</span><br><span class="line">    filter-placement&#x3D;&quot;bottom-end&quot;&gt;</span><br><span class="line">    &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">        &lt;el-tag</span><br><span class="line">        :type&#x3D;&quot;scope.row.status &#x3D;&#x3D;&#x3D; &#39;0&#39; ? &#39;warning&#39; : &#39;success&#39;&quot;</span><br><span class="line">        close-transition&gt;&lt;&#x2F;el-tag&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;el-table-column&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filterTag(value, row) &#123;</span><br><span class="line">    return row.tag &#x3D;&#x3D;&#x3D; value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Formatted</title>
      <link href="/2020/08/11/Formatted/"/>
      <url>/2020/08/11/Formatted/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/maimai2.jpg"><br>这是麦麦从沙发上掉下去了~<br>麦麦：从哪里跌倒就要在哪里睡觉</p><a id="more"></a><p>遇到一个问题<br>从服务器获取的数据并不是想要显示的结果这时候通过可以使用formatter属性来自定义表格的内容。<br>一般用于时间或者状态转换</p><p>状态:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column</span><br><span class="line">    prop&#x3D;&quot;zipcode&quot;</span><br><span class="line">    label&#x3D;&quot;zipcode&quot;</span><br><span class="line">    width&#x3D;&quot;450&quot;</span><br><span class="line">    :formatter&#x3D;&quot;formatCode&quot;&gt;</span><br><span class="line">&lt;&#x2F;el-table-column&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">formatCode(row) &#123;</span><br><span class="line">if(row.status &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">return &#39;否&#39;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return &#39;是&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日期:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column</span><br><span class="line">    prop&#x3D;&quot;time&quot;</span><br><span class="line">    width&#x3D;&quot;50&quot;</span><br><span class="line">    :formatter&#x3D;&quot;formatDate&quot;&gt;</span><br><span class="line">&lt;&#x2F;el-table-column&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">formatDate(row, column) &#123;</span><br><span class="line">let date &#x3D; new Date(row.time)</span><br><span class="line"></span><br><span class="line">return date.getFullYear() + &#39;-&#39; + date.getFullMonth() + &#39;-&#39; + date.getDate() + &#39; &#39; + date.getHours() + &#39;:&#39; + date.getMinutes() + &#39;:&#39; + date.getSeconds() + &#39;.&#39; + date.getMilliseconds();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>就是麦麦</title>
      <link href="/2020/08/07/%E5%B0%B1%E6%98%AF%E9%BA%A6%E9%BA%A6/"/>
      <url>/2020/08/07/%E5%B0%B1%E6%98%AF%E9%BA%A6%E9%BA%A6/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/maimai1.jpg"><br>看看我可爱的麦麦~</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
